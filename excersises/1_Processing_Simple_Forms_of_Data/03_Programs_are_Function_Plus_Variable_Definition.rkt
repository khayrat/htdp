;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname 3_Programs_are_Function_Plus_Variable_Definition) (read-case-sensitive #t) (teachpacks ((lib "convert.rkt" "teachpack" "htdp"))) (htdp-settings #(#t constructor repeating-decimal #t #t none #f ((lib "convert.rkt" "teachpack" "htdp")))))
#|
Consider the following problem:
Imagine the owner of a movie theater who has complete freedom in setting ticket prices. 
The more he charges, the fewer the people who can afford tickets. In a recent experiment 
the owner determined a precise relationship between the price of a ticket and average
attendance. At a price of $5.00 per ticket, 120 people attend a performance. 
Decreasing the price by a dime ($.10) increases attendance by 15. 
Unfortunately, the increased attendance also comes at an increased cost. 
Every performance costs the owner $180. Each attendee costs another four cents ($0.04). 
The owner would like to know the exact relationship between profit and ticket price so 
that he can determine the price at which he can make the highest profit.
While the task is clear, how to go about it is not. All we can say at this point is that 
several quantities depend on each other.
When we are confronted with such a situation, it is best to tease out the various 
dependencies one at a time:

1. Profit is the difference between revenue and costs.
2. The revenue is exclusively generated by the sale of tickets. It is the product
   of ticket price and number of attendees.
3. The costs consist of two parts: a fixed part ($180) and a variable part that depends
   on the number of attendees.
4. Finally, the problem statement also specifies how the number of attendees depends 
   on the ticket price.
|#

;; profit : number  ->  number
;; to compute the profit as the difference between revenue and costs
;; at some given ticket-price
(check-expect (profit-v1 5)   (- (revenue 5)   (cost-v1 5)))
(check-expect (profit-v1 5.1) (- (revenue 5.1) (cost-v1 5.1)))
(check-expect (profit-v1 3)   (- (revenue 3)   (cost-v1 3)))
(check-expect (profit-v1 4)   (- (revenue 4)   (cost-v1 4)))

(define (profit-v1 ticket-price) 
  (- (revenue ticket-price) 
     (cost-v1 ticket-price)))

;; revenue : number  ->  number
;; to compute the revenue, given ticket-price 
(check-expect (revenue 5)   (* 5 (attendees 5)))
(check-expect (revenue 5.1) (* 5.1 (attendees 5.1)))
(check-expect (revenue 4)   (* 4 (attendees 4)))

(define (revenue ticket-price) 
  (* ticket-price (attendees ticket-price)))

;; cost : number  ->  number
;; to compute the costs, given ticket-price
(check-expect (cost-v1 5)   (+ 180 (* 0.04 (attendees 5))))
(check-expect (cost-v1 5.1) (+ 180 (* 0.04 (attendees 5.1))))
(check-expect (cost-v1 4)   (+ 180 (* 0.04 (attendees 4))))

(define (cost-v1 ticket-price) 
  (+ 180
     (* 0.04 (attendees ticket-price))))

;; attendees : number  ->  number
;; to compute the number of attendees, given ticket-price
(check-expect (attendees 5)    120)
(check-expect (attendees 5.10) (- 120 15))
(check-expect (attendees (- 5 (* 1  .10))) (+ 120 (* 1  15)))
(check-expect (attendees (- 5 (* 10 .10))) (+ 120 (* 10 15)))
(check-expect (attendees 3)                (+ 120 (* 20 15)))

(define (attendees ticket-price) 
  (+ 120
     (* (/ (- 5 ticket-price)
           .1)
        15)))


;; 3.1.3
;; How not to design a program 
(define (right-profit-v1 price)
  (- (* (+ 120
           (* (/ 15 .10)
              (- 5.00 price)))
        price)
     (+ 180 
        (* .04
           (+ 120
              (* (/ 15 .10)
                 (- 5.00 price))))))) 

;; How to design a program 
;;(define left-profit profit)

(check-expect (profit-v1 5)   (right-profit-v1 5))
(check-expect (profit-v1 5.1) (right-profit-v1 5.1))
(check-expect (profit-v1 3)   (right-profit-v1 3))
(check-expect (profit-v1 4)   (right-profit-v1 4))

;; 3.1.4
;; he no longer has a fixed cost. He now simply pays $1.50 per attendee.
(define (cost-v2 ticket-price) 
  (* 1.50 (attendees ticket-price)))

(define (profit-v2 ticket-price) 
  (- (revenue ticket-price) 
     (cost-v2 ticket-price)))

;; How not to design a program 
(define (right-profit-v2 price)
  (- (* (+ 120
           (* (/ 15 .10)
              (- 5.00 price)))
        price)
     (* 1.50
        (+ 120
           (* (/ 15 .10)
              (- 5.00 price)))))) 

;; How to design a program 
;;(define left-profit profit)

(check-expect (profit-v2 5)   (right-profit-v2 5))
(check-expect (profit-v2 5.1) (right-profit-v2 5.1))
(check-expect (profit-v2 3)   (right-profit-v2 3))
(check-expect (profit-v2 4)   (right-profit-v2 4))

;; Exercise 3.2.1.
;; Provide variable definitions for all constants that appear in the profit program
;; and replace the constants with their names. 

(define FIX-COST 180)
(define VAR-COST 0.04)
(define BASE-ATTENDEES 120)
(define BASE-PRICE 5)
(define CHANGE-SAMPLER 0.1)
(define CHANGE-PER-SAMPLE 15)

(define (profit-v3 ticket-price) 
  (- (revenue-v3 ticket-price) 
     (cost-v3 ticket-price)))

(define (revenue-v3 ticket-price) 
  (* ticket-price (attendees-v3 ticket-price)))

(define (cost-v3 ticket-price) 
  (+ FIX-COST
     (* VAR-COST (attendees ticket-price))))

(define (attendees-v3 ticket-price) 
  (+ BASE-ATTENDEES
     (* (/ (- BASE-PRICE ticket-price)
           CHANGE-SAMPLER)
        CHANGE-PER-SAMPLE)))

;; How not to design a program 
(define (right-profit-v3 price)
  (- (* (+ BASE-ATTENDEES
           (* (/ CHANGE-PER-SAMPLE CHANGE-SAMPLER)
              (- BASE-PRICE price)))
        price)
     (+ FIX-COST 
        (* VAR-COST
           (+ BASE-ATTENDEES
              (* (/ CHANGE-PER-SAMPLE CHANGE-SAMPLER)
                 (- BASE-PRICE price))))))) 

(check-expect (profit-v3 5)   (right-profit-v3 5))
(check-expect (profit-v3 5.1) (right-profit-v3 5.1))
(check-expect (profit-v3 3)   (right-profit-v3 3))
(check-expect (profit-v3 4)   (right-profit-v3 4))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Exercise 3.3.1.
;; Develop the functions inches->cm, feet->inches, yards->feet, rods->yards, 
;; furlongs->rods, and miles->furlongs.
;; Then develop the functions feet->cm, yards->cm, rods->inches, and miles->feet.
(define IN-CM 2.54)
(define FT-IN 12)
(define YD-FT 3)
(define RD-YD (+ 5 1/2))
(define FL-RD 40)
(define ML-FL 8)

;; Number -> Number
(check-expect (inches->cm 1) 2.54)
(define (inches->cm in)
  (* in IN-CM))

;; Number -> Number
(check-expect (feet->inches 1) 12)
(define (feet->inches ft)
  (* ft FT-IN))

;; Number -> Number
(check-expect (yards->feet 1) 3)
(define (yards->feet yd)
  (* yd YD-FT))

;; Number -> Number
(check-expect (rods->yards 1) (+ 5 1/2))
(define (rods->yards rd)
  (* rd RD-YD))

;; Number -> Number
(check-expect (furlongs->rods 1) 40)
(define (furlongs->rods fl)
  (* FL-RD))

;; Number -> Number
(check-expect (miles->furlongs 1) 8)
(define (miles->furlongs ml)
  (* ml ML-FL))

;; Number -> Number
(check-expect (feet->cm 1)  (inches->cm (feet->inches 1)))
(check-expect (feet->cm 10) (inches->cm (feet->inches 10)))
(define (feet->cm ft)
  (inches->cm (feet->inches ft)))

;; Number -> Number
(check-expect (yards->cm 1)  (feet->cm (yards->feet 1)))
(check-expect (yards->cm 10) (feet->cm (yards->feet 10)))
(define (yards->cm yd)
  (feet->cm (yards->feet yd)))

;; Number -> Number
(check-expect (rods->inches 1) (feet->inches 
                                (yards->feet 
                                 (rods->yards 1))))
(check-expect (rods->inches 10) (feet->inches 
                                 (yards->feet 
                                  (rods->yards 10))))
(define (rods->inches rd)
  (feet->inches 
   (yards->feet 
    (rods->yards rd))))

;; Number -> Number
(check-expect (miles->feet 1) (yards->feet 
                               (rods->yards 
                                (furlongs->rods
                                 (miles->furlongs 1)))))
(check-expect (miles->feet 10) (yards->feet 
                                (rods->yards 
                                 (furlongs->rods
                                  (miles->furlongs 10)))))
(define (miles->feet ml)
  (yards->feet 
   (rods->yards 
    (furlongs->rods
     (miles->furlongs ml)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Exercise 3.3.2.   Develop the program volume-cylinder. 
;; It consumes the radius of a cylinder's base disk and its height; 
;; it computes the volume of the cylinder.

;; Data

(define PI 3.14159)

;; Number Number -> Number
;; consumes the radius of a cylinder's base disk and its height; 
;; produces the volume of the cylinder.
(check-expect (volume-cylinder 1 10) 
              (* (area-disk 1)
                 10))

(define (volume-cylinder r h)
  (* (area-disk r)
     h))

;; Number Number -> Number
;; consumes the radius of a disk; 
;; produces the area of the disk.
(check-expect (area-disk 2) 
              (* 2 2 PI))

(define (area-disk r)
  (* r r PI))

;; Exercise 3.3.3.   Develop area-cylinder. 
;; The program consumes the radius of the cylinder's base disk and its height. 
;; Its result is the surface area of the cylinder.

;; Number Number -> Number
;; consumes the radius of the cylinder's base disk and its height. 
;; produces the surface area of the cylinder.
(check-expect (area-cylinder 1 10)
              (+ (* 2 (area-disk 1))
                 (area-rect 10 
                            (circum-disk 1))))

(define (area-cylinder r h)
  (+ (* 2 (area-disk r))
     (area-rect h 
                (circum-disk r))))

;; Number -> Number
;; consumes the radius of a disk.
;; produces the circumference.
(check-expect (circum-disk 10) (* 2 10 PI))
(define (circum-disk r)
  (* 2 PI r))

;; Number Number -> Number
;; consumes the width and length of a rectangle.
;; produces the area.
(check-expect (area-rect 2 3) (* 2 3))
(define (area-rect a b)
  (* a b))

;; Exercise 3.3.4.   Develop the function area-pipe. It computes the surface area 
;; of a pipe, which is an open cylinder. 
;; The program consumes three values: the pipe's inner radius, its length, and 
;; the thickness of its wall.

;; Number Number Number -> Number
;; consumes the pipe's inner radius, its length, and the thickness of its wall
;; produces the surface area of a pipe, which is an open cylinder.
(check-expect (area-pipe 3 100 .2)
              (+ (* 100 (circum-disk (+ 3 .2)))
                 (* 100 (circum-disk 3))
                 (* 2 (area-ring (+ 3 .2) 3))))

(define (area-pipe inner-r l tw)
  (+ (* l (circum-disk (+ inner-r tw)))
     (* l (circum-disk inner-r))
     (* 2 (area-ring (+ inner-r tw) inner-r))))
;; Number Number -> Number
;; produces the are of a ring given outer and inner radius
(check-expect (area-ring 10 5) (- (area-disk 10)
                                  (area-disk 5)))
(define (area-ring outer-r inner-r)
  (- (area-disk outer-r)
     (area-disk inner-r)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Exercise 3.3.5.   Develop the program height, which computes the height that a rocket
;; reaches in a given amount of time. If the rocket accelerates at a constant rate g,
;; it reaches a speed of g · t in t time units and a height of 1/2 * v * t where v is
;; the speed at t. 

;; Data

(define g 10)
;; interp. the constant rate of acceleration [m/s**2]

;; Number -> Number
;; produces the hight at given time [s]
(check-expect (hight 100)
              (* 1/2 (v 100) 100))

(define (hight t)
  (* 1/2 (v t) t))

;; Number -> Number
;; produces speed at the given time [s].
(check-expect (v 100) (* 10 100))
(define (v t)
  (* g t))